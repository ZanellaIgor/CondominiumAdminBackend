datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id           Int           @id @default(autoincrement())
  name         String        @db.VarChar(90)
  email        String        @unique @db.VarChar(60)
  password     String        @db.Text
  profilePhoto String?
  role         Role
  apartmentId  Int
  apartment    Apartment     @relation(fields: [apartmentId], references: [id])
  warnings     Warning[]
  reservations Reservation[]
  maintenances Maintenance[]
  userAnswers  UserAnswer[]
  condominiums Condominium[] @relation("UserCondominiums")
}

model Apartment {
  id            Int          @id @default(autoincrement())
  name          String       @db.VarChar(60)
  condominiumId Int
  condominium   Condominium  @relation(fields: [condominiumId], references: [id])
  users         User[]
  userAnswers   UserAnswer[]
}

model Condominium {
  id                Int                @id @default(autoincrement())
  name              String             @db.VarChar(60)
  apartments        Apartment[]
  warnings          Warning[]
  reservations      Reservation[]
  maintenances      Maintenance[]
  surveys           Survey[]
  userAnswers       UserAnswer[]
  spaceReservations SpaceReservation[]
  users             User[]             @relation("UserCondominiums")
}

enum Role {
  ADMIN
  USER
}

enum Situation {
  ABERTO
  ANALISE
  ATENDIDO
  REABERTO
  SUSPENSO
}

enum SituationReservation {
  ABERTO
  ANALISE
  CONFIRMADO
}

enum Category {
  MEDIA
  ALTA
  GRAVE
  CRITICA
}

model SpaceReservation {
  id            Int           @id @default(autoincrement())
  name          String        @db.VarChar(60)
  condominiumId Int
  condominium   Condominium   @relation(fields: [condominiumId], references: [id])
  reservations  Reservation[]
}

model Warning {
  id            Int         @id @default(autoincrement())
  title         String      @db.VarChar(60)
  description   String?     @db.VarChar(120)
  situation     Situation   @default(ABERTO)
  category      Category
  userId        Int
  user          User        @relation(fields: [userId], references: [id])
  condominiumId Int
  condominium   Condominium @relation(fields: [condominiumId], references: [id])
}

model Reservation {
  id                 Int                  @id @default(autoincrement())
  title              String               @db.VarChar(60)
  description        String?              @db.VarChar(120)
  userId             Int
  user               User                 @relation(fields: [userId], references: [id])
  startDateTime      DateTime
  endDateTime        DateTime
  spaceReservationId Int
  space              SpaceReservation     @relation(fields: [spaceReservationId], references: [id])
  situation          SituationReservation
  condominiumId      Int
  condominium        Condominium          @relation(fields: [condominiumId], references: [id])
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
}

model Maintenance {
  id            Int         @id @default(autoincrement())
  title         String      @db.VarChar(60)
  description   String?     @db.VarChar(120)
  situation     Situation   @default(ABERTO)
  category      Category
  userId        Int
  user          User        @relation(fields: [userId], references: [id])
  condominiumId Int
  condominium   Condominium @relation(fields: [condominiumId], references: [id])
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model Survey {
  id            Int         @id @default(autoincrement())
  title         String      @db.VarChar(60)
  description   String?     @db.VarChar(120)
  questions     Question[]
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  condominiumId Int
  condominium   Condominium @relation(fields: [condominiumId], references: [id])
}

model Question {
  id       Int      @id @default(autoincrement())
  text     String   @db.VarChar(120)
  surveyId Int
  survey   Survey   @relation(fields: [surveyId], references: [id])
  answers  Answer[]
}

model Answer {
  id          Int          @id @default(autoincrement())
  text        String       @db.VarChar(120)
  questionId  Int
  question    Question     @relation(fields: [questionId], references: [id])
  userAnswers UserAnswer[]
}

model UserAnswer {
  id            Int          @id @default(autoincrement())
  userId        Int
  answerId      Int
  user          User         @relation(fields: [userId], references: [id])
  answer        Answer       @relation(fields: [answerId], references: [id])
  status        Boolean      @default(true)
  Apartment     Apartment?   @relation(fields: [apartmentId], references: [id])
  apartmentId   Int?
  Condominium   Condominium? @relation(fields: [condominiumId], references: [id])
  condominiumId Int?
}
