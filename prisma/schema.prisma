datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id           Int           @id @default(autoincrement())
  name         String        @db.VarChar(90)
  email        String        @unique @db.VarChar(60)
  password     String        @db.Text
  profilePhoto String?
  role         Role
  apartments   Apartment[]   @relation("UserApartments")
  condominiums Condominium[] @relation("UserCondominiums")
  warnings     Warning[]
  reservations Reservation[]
  maintenances Maintenance[]

  Answer              Answer[]
  SurveyParticipation SurveyParticipation[]
}

model Apartment {
  id            Int         @id @default(autoincrement())
  name          String      @db.VarChar(60)
  condominiumId Int
  condominium   Condominium @relation(fields: [condominiumId], references: [id])
  users         User[]      @relation("UserApartments")

  Answer      Answer[]
  Reservation Reservation[]
}

model Condominium {
  id           Int           @id @default(autoincrement())
  name         String        @db.VarChar(60)
  apartments   Apartment[]
  warnings     Warning[]
  reservations Reservation[]
  maintenances Maintenance[]
  surveys      Survey[]

  spaceReservations   SpaceReservation[]
  users               User[]                @relation("UserCondominiums")
  CondominiumOnSurvey CondominiumOnSurvey[]
  Answer              Answer[]
}

enum Role {
  ADMIN
  USER
  MASTER
}

enum Situation {
  ABERTO
  ANALISE
  ATENDIDO
  REABERTO
  SUSPENSO
}

enum SituationReservation {
  ABERTO
  ANALISE
  CONFIRMADO
}

enum Category {
  MEDIA
  ALTA
  GRAVE
  CRITICA
}

model SpaceReservation {
  id            Int           @id @default(autoincrement())
  name          String        @db.VarChar(60)
  condominiumId Int
  condominium   Condominium   @relation(fields: [condominiumId], references: [id])
  reservations  Reservation[]
}

model Warning {
  id            Int         @id @default(autoincrement())
  title         String      @db.VarChar(60)
  description   String?     @db.VarChar(120)
  situation     Situation   @default(ABERTO)
  category      Category
  userId        Int
  user          User        @relation(fields: [userId], references: [id])
  condominiumId Int
  condominium   Condominium @relation(fields: [condominiumId], references: [id])
}

model Reservation {
  id                 Int                  @id @default(autoincrement())
  title              String               @db.VarChar(60)
  description        String?              @db.VarChar(120)
  userId             Int
  user               User                 @relation(fields: [userId], references: [id])
  startDateTime      DateTime
  endDateTime        DateTime
  spaceReservationId Int
  space              SpaceReservation     @relation(fields: [spaceReservationId], references: [id])
  situation          SituationReservation @default(ABERTO)
  condominiumId      Int
  condominium        Condominium          @relation(fields: [condominiumId], references: [id])
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  apartmentId       Int                  @default(1)
  apartament         Apartment            @relation(fields: [apartmentId], references: [id])
}

model Maintenance {
  id            Int         @id @default(autoincrement())
  title         String      @db.VarChar(60)
  description   String?     @db.VarChar(120)
  situation     Situation   @default(ABERTO)
  category      Category
  userId        Int
  user          User        @relation(fields: [userId], references: [id])
  condominiumId Int
  condominium   Condominium @relation(fields: [condominiumId], references: [id])
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model Survey {
  id                  Int                   @id @default(autoincrement())
  title               String                @db.VarChar(60)
  description         String?               @db.VarChar(120)
  status              Boolean               @default(true)
  questions           Question[]
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  condominiumId       Int
  condominium         Condominium           @relation(fields: [condominiumId], references: [id])
  validFrom           DateTime
  validTo             DateTime?
  condominiums        CondominiumOnSurvey[]
  SurveyParticipation SurveyParticipation[]
  Answer              Answer[]
}

model CondominiumOnSurvey {
  id            Int         @id @default(autoincrement())
  surveyId      Int
  condominiumId Int
  survey        Survey      @relation(fields: [surveyId], references: [id])
  condominium   Condominium @relation(fields: [condominiumId], references: [id])
}

enum QuestionType {
  TEXT
  OPTIONAL
  MULTIPLE
  BOOLEAN
}

model QuestionOption {
  id         Int      @id @default(autoincrement())
  text       String   @db.VarChar(120)
  questionId Int
  question   Question @relation(fields: [questionId], references: [id])
  Answer     Answer[]
}

model Question {
  id       Int              @id @default(autoincrement())
  text     String           @db.VarChar(120)
  type     QuestionType
  surveyId Int
  survey   Survey           @relation(fields: [surveyId], references: [id])
  answers  Answer[]
  options  QuestionOption[]
}

model Answer {
  id     Int  @id @default(autoincrement())
  userId Int
  user   User @relation(fields: [userId], references: [id])

  questionId Int
  question   Question @relation(fields: [questionId], references: [id])

  optionId Int?
  option   QuestionOption? @relation(fields: [optionId], references: [id])
  text     String?         @db.VarChar(120)

  surveyId Int
  survey   Survey @relation(fields: [surveyId], references: [id])

  apartmentId Int?
  apartment   Apartment? @relation(fields: [apartmentId], references: [id])

  condominiumId Int?
  condominium   Condominium? @relation(fields: [condominiumId], references: [id])
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  status        Boolean      @default(true)

  @@unique([userId, questionId])
}

model SurveyParticipation {
  id           Int      @id @default(autoincrement())
  surveyId     Int
  survey       Survey   @relation(fields: [surveyId], references: [id])
  userId       Int
  user         User     @relation(fields: [userId], references: [id])
  hasResponded Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@unique([surveyId, userId])
}
